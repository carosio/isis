<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>
      <erl>
	out(_) ->
	<<A:16, B:16, C:16>> = isis_system:system_id(),
	  Title = io_lib:format("~s (~4.16.0B.~4.16.0B.~4.16.0B) SPF Results",
	  [isis_system:get_state(hostname), A, B, C]),
	  {html, lists:flatten(Title)}.
      </erl>
    </title>
    <script type="text/javascript" src="d3/d3.js"></script>
</head>
<style>

path.link {
  fill: none;
  stroke: #666;
  stroke-width: 1.5px;
}

circle {
  stroke: #fff;
  stroke-width: 1.5px;
}

text {
  fill: #000;
  font: 12px sans-serif;
  pointer-events: none;
}

.routingtable {
  margin-top: 10px;
  height: 200px;
  overflow: scroll;
}

</style>
<body>
<div class="intro">
<B>IS-IS Network</B><BR>
This graph is the result of the SPF run from ISIS.<br>
</div>
<div id="spftime">Waiting for the SPF update</div>
<div id="routingtable" class="routingtable">IP routes will appear here</div>
<script type="text/javascript" charset="utf-8">

var ws;
var nodes = [];
var paths = [];
var links = [];
var pathLookup = [];
var oldLinks = {};
var selectedNode = {};
var toggle = false;

function connectToSPFFeed() {
    if ("WebSocket" in window) {
	// make sure yaws is listening on the URL
	ws = new WebSocket("ws://" + document.location.host + "/spf"); 
	ws.onopen = function() {
            ws.send("start");
	};
	ws.onmessage = function (evt) { 
	    var received_msg = evt.data;
	    NewState = JSON.parse(received_msg);
	    if (NewState["Time"] > 0) {
		document.getElementById('spftime').innerHTML =
		    "The last SPF run took " + NewState["Time"] + " &micro;seconds, due to: " + NewState["Reason"]
            }
            Rib = "";
            if (NewState.rib[0] != undefined) {
		for(var i = 0; i < NewState.rib.length; i++) {
		    for(var j = 0; j < NewState.rib[i].length; j++) {
			if (NewState.rib[i][j].from.length > 0) {
			    From = " source " + NewState.rib[i][j].from
			} else {
			    From = ""
			}
			NexthopStr = "(";
			for(var y = 0; y < NewState.rib[i][j].nexthop.length; y++) {
                            NexthopStr += NewState.rib[i][j].nexthop[y] + " via " +
				NewState.rib[i][j].interface[y];
                            if (y+1 < NewState.rib[i][j].length) {
				NexthopStr += ", ";
			    }
			}
			NexthopStr += ")"
			Rib += NewState.rib[i][j].address + "/"
			    + NewState.rib[i][j].mask + From + " -> "
			    + "Nexthops: " + NexthopStr
			    + " Paths: (" + NewState.rib[i][j].nodepath + ")<BR>";
		    }
		}
            }
	    document.getElementById('routingtable').innerHTML = Rib;

	    // Build the node -> array of links to highlight..
	    paths = {};
	    for (var i = 0; i < NewState.paths.length; i++) {
		var P = NewState.paths[i];
		paths[P.id] = [];
		for(var x = 0; x < P.paths.length; x++) {
		    for(var y = 1; y < P.paths[x].length; y++) {
			paths[P.id].push(P.paths[x][y-1] + ", " + P.paths[x][y])
		    }
		}
	    }
	    
	    // Work out the changes to Nodes
	    nodeLookup = {}
            for (var i = 0, len = nodes.length; i < len; i++) {
		nodes[i].updated = false;
		nodeLookup[nodes[i].id] = nodes[i];
            }
            NewState.links.forEach(function(link) {
		if (!nodeLookup[link.source]) {
		    var chosenColour;
		    if (link.source_name.slice(-1) == ">") {
			chosenColour = parseInt(link.source_name.slice(link.source_name.lastIndexOf(',')+1,-2),10);
		    } else {
			chosenColour = parseInt(link.source_name.slice(-2),16);
		    }
		if (chosenColour != 0)
			chosenColour = 1;
                    nodes.push({id: link.source,
				colour: chosenColour});
                    nodeLookup[link.source] = nodes[nodes.length-1];
		}
		nameChanged = false;
		if ("source_name" in link) {
		    if (nodeLookup[link.source].name != link.source_name) {
			nodeLookup[link.source].name = link.source_name;
			nameChanged = true;
		    }
		} else {
		    nodeLookup[link.source].name = link.source;
		}
		if (! nameChanged) {
		    nodeLookup[link.source].updated = true;
		} else {
		    console.log("Named changed for " + link.source);
		}
		if (!nodeLookup[link.target]) {
		    var chosenColour;
		    if (link.target_name.slice(-1) == ">") {
			chosenColour = parseInt(link.target_name.slice(link.target_name.lastIndexOf(',')+1,-2),10);
		    } else {
			chosenColour = parseInt(link.target_name.slice(-2),16);
		    }
		if (chosenColour != 0)
			chosenColour = 1;
                    nodes.push({id: link.target,
				colour: chosenColour});
                    nodeLookup[link.target] = nodes[nodes.length-1];
		}
		nameChanged = false;
		if ("target_name" in link) {
		    if (nodeLookup[link.target].name != link.target_name) {
			nodeLookup[link.target].name = link.target_name;
			nameChanged = true;
		    }
		} else {
		    nodeLookup[link.target].name = link.target;
		}
		if (! nameChanged) {
		    nodeLookup[link.target].updated = true;
		} else {
		    console.log("Named changed for " + link.source);
		}
            });
            i = 0;
            while(i < nodes.length) {
		if (nodes[i].updated === false) {
		    nodes.splice(i, 1);
                } else {
		    i++;
                }
            }

	    // Now see if we can diff the link changes...
	    linkLookup = {}
            for (var i = 0, len = links.length; i < len; i++) {
		links[i].updated = false;
            }
	    NewState.links.forEach(function(link) {
		found = false;
		// Ugh, linear searching for now...
		for (var i = 0, len = links.length; i < len && found === false; i++) {
                    if(links[i].source === link.source.id &&
		       links[i].target === link.target.id) {
			links[i].updated = true;
			found = true;
                    }
		}
		if (found === false) {
                    links.push({source: nodeLookup[link.source],
				target: nodeLookup[link.target],
				bidir: false,
				updated: true});
		}
            });
            i = 0;
            while(i < links.length) {
		if (links[i].updated === false) {
                    links.splice(i, 1);
		} else {
                    i++;
		}
	    }
	    
	    // Check for non-bidir links in a horrible fashion!
	    for(var i = 0; i < links.length; i++) {
		if (links[i].bidir == true) continue;
		for(var y = i+1; y < links.length; y++) {
		    if (links[i].source.id === links[y].target.id
			&& links[i].target.id === links[y].source.id) {
			links[i].bidir = true;
			links[y].bidir = true;
			break;
		    }
		}
	    }
	    
	    // Do it!
	    start();
	};
	
	ws.onclose = function() {
	    setTimeout(function() { connectToSPFFeed()}, 1000);
	};
	
	ws.onerror = function() {
	    document.writeln("ERROR");
	};
    }
    return false;
}

connectToSPFFeed();

// get the data
//function process() {

// Compute the distinct nodes from the links.
//});

var width = 960,
    height = 500;

var color = d3.scale.linear()
    .domain([0, 1, 255])
    .range(["red", "blue", "green"]);

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-600)
    .linkDistance(120)
    .size([width, height])
    .on("tick", tick);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

svg.append("svg:defs").selectAll("marker")
    .data(["end"])      // Different link/path types can be defined here
    .enter().append("svg:marker")    // This section adds in the arrows
    .attr("id", String)
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
    .append("svg:path")
    .attr("d", "M0,-5L10,0L0,5");

var path = svg.append("svg:g").selectAll("path")
    .data(force.links())
    .enter().append("svg:path")
    .style("opacity", function(o) {
	return onPathTo(o) ? 1: 0.1
    })
    .attr("class", "link")
    .attr("marker-end", "url(#end)");

var node = svg.selectAll(".node"),
label = svg.selectAll(".text");

function start() {
    path = path.data(force.links(), function(d) { return d.source.id + "-" + d.target.id; });
    path.enter().append("svg:path")
	.attr("class", "link")
	.attr("marker-end", "url(#end)")
	.style("stroke-dasharray",
	       function(d) {
		   if (d.bidir == true) {
		       return("1,0");
		   } else {
		       return("2,7");
		   }});
    path.style("opacity",
	       function(o) {
		   return onPathTo(o) ? 1 : 0.1;
	       });
    path.exit().remove();
    
    node = node.data(force.nodes(), function(d) { return d.id;});
    node.enter()
	.append("g")
	.attr("class", "node")
	.call(force.drag)
	.on('dblclick', highlightPaths)
	.append("circle")
	.attr("r", function(d){ return (d.colour == 0) ? 8 : 5})
	.style("fill", function(d){ return color(d.colour)});
    node.exit().remove();
    
    label = label.data(force.nodes(), function(d) { return d.id; });
    label.enter()
	.append("text")
	.attr("x", 12)
	.attr("dy", ".35em")
	.text(function(d) { console.log("Setting name for " + d.name); return d.name; });
    label.exit().remove();

    force.start();
}

function tick() {
    // Curved Paths - see non bi-dir links easily...
    // path.attr("d", function(d) {
    // 	var dx = d.target.x - d.source.x,
    //     dy = d.target.y - d.source.y,
    //     dr = Math.sqrt(dx * dx + dy * dy);
    // 	return "M" +
    //         d.source.x + "," +
    //         d.source.y + "A" +
    //         dr + "," + dr + " 0 0,1 " +
    //         d.target.x + "," +
    //         d.target.y;
    // });

    // Straight paths..
    path.attr("d", function(d) {
        var dx = d.target.x - d.source.x,
        dy = d.target.y - d.source.y,
        dr = Math.sqrt(dx * dx + dy * dy);
        return "M" + 
            d.source.x + "," + 
            d.source.y + " " + 
            d.target.x + "," + 
            d.target.y;
    });


   node.attr("transform", function(d) { 
      return 'translate(' + [d.x, d.y] + ')'; 
   });    

  label.attr("transform", function(d) {
      return 'translate(' + [d.x, d.y] + ')';
  });
 
}

function onPathTo(o) {
    if (selectedNode.hasOwnProperty('id')) {
	if (paths[selectedNode.id].indexOf(o.source.id + ", " + o.target.id) > -1
	    || paths[selectedNode.id].indexOf(o.target.id + ", " + o.source.id) > -1) {
	    return true;
	} else {
	    return false;
	}
    } else {
	return true;
    }
}

function highlightPaths() {
    if (toggle === false) {
	selectedNode = d3.select(this).node().__data__;
	d = selectedNode;
	console.log("Highlighting paths via " + d.name);
	path.style("opacity", function (o) {
            return onPathTo(o) ? 1 : 0.1;
	});
	toggle = true;
    } else {
	selectedNode = {}
        path.style("opacity", 1);
	toggle = false;
    }
}

</script>
</body>
</html>
